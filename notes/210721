# Voltage out of potential control appears to be correct to within a 7 mV systematic error.

Tested output of potential control.  Voltage requested is the voltage delivered within 10 mV.  Based upon measurements using the DVM, the voltage is about 7+/-3 mV below requested.  Response is linear from -1.5 to 1.5 V vs VGND.

Code used to test:

  while True:
  base.analogWriteVoltage(ctl, 0.1, vground=True)
  myVoltage = base.toVoltage(base.analogRead(volt),vground=True)
  myCurrent = base.toVoltage(base.analogRead(curr),vground=True)
  print(f'volt: {round(myVoltage,3)}, curr: {round(myCurrent,3)}')
  sleep(1)

# Current appears to be low by about 1.3 percent.

Using same code as above and measuring a 10 kOhm resistor, IV curve determines resistance value that is low by 1.3 percent.

# Control pins require .deinit() to stop current from flowing through cell.

Passing ctl.deinit() and allowing some sleep time shows the output current falling to zero.

# Cannot currently explore using multiple inputs due to possible bug in CP

A1 pin is not correctly released when it is assigned as an analog output, so I cannot "shut it off" by converting it to analog in.

# Time for analog read 8 data points is 366 us

There's some amount of overhead, but averaging 8 reads takes 366 us 244 us for 4 and 12 is between 488 and 610 (oddly bounces between the two).  Fastest appears to be 2 at 122 us.  Will arbitrarily choose 8 as the default.

One analogwrite and two reads, which I think is simplest routine for a CV, is 854 us.  Time constants need to be accounted for, so let's say bleeding edge rates are 1 kHz and a more realistic upper limit is closer to 500 hz.  At 10 V/s, that's 100 points per V, which seems reasonable.

Updating the CV sweep routine.
